// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Labels added to the Kubernetes resource.
type KafkaUserSpecTemplateSecretMetadataLabels struct {
}

// The status of the Kafka User.
type KafkaUserStatus struct {
	// List of status conditions.
	Conditions []KafkaUserStatusConditions `pulumi:"conditions"`
	// The generation of the CRD that was last reconciled by the operator.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// The name of `Secret` where the credentials are stored.
	Secret *string `pulumi:"secret"`
	// Username.
	Username *string `pulumi:"username"`
}

// KafkaUserStatusInput is an input type that accepts KafkaUserStatusArgs and KafkaUserStatusOutput values.
// You can construct a concrete instance of `KafkaUserStatusInput` via:
//
//	KafkaUserStatusArgs{...}
type KafkaUserStatusInput interface {
	pulumi.Input

	ToKafkaUserStatusOutput() KafkaUserStatusOutput
	ToKafkaUserStatusOutputWithContext(context.Context) KafkaUserStatusOutput
}

// The status of the Kafka User.
type KafkaUserStatusArgs struct {
	// List of status conditions.
	Conditions KafkaUserStatusConditionsArrayInput `pulumi:"conditions"`
	// The generation of the CRD that was last reconciled by the operator.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// The name of `Secret` where the credentials are stored.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// Username.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (KafkaUserStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserStatus)(nil)).Elem()
}

func (i KafkaUserStatusArgs) ToKafkaUserStatusOutput() KafkaUserStatusOutput {
	return i.ToKafkaUserStatusOutputWithContext(context.Background())
}

func (i KafkaUserStatusArgs) ToKafkaUserStatusOutputWithContext(ctx context.Context) KafkaUserStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusOutput)
}

func (i KafkaUserStatusArgs) ToKafkaUserStatusPtrOutput() KafkaUserStatusPtrOutput {
	return i.ToKafkaUserStatusPtrOutputWithContext(context.Background())
}

func (i KafkaUserStatusArgs) ToKafkaUserStatusPtrOutputWithContext(ctx context.Context) KafkaUserStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusOutput).ToKafkaUserStatusPtrOutputWithContext(ctx)
}

// KafkaUserStatusPtrInput is an input type that accepts KafkaUserStatusArgs, KafkaUserStatusPtr and KafkaUserStatusPtrOutput values.
// You can construct a concrete instance of `KafkaUserStatusPtrInput` via:
//
//	        KafkaUserStatusArgs{...}
//
//	or:
//
//	        nil
type KafkaUserStatusPtrInput interface {
	pulumi.Input

	ToKafkaUserStatusPtrOutput() KafkaUserStatusPtrOutput
	ToKafkaUserStatusPtrOutputWithContext(context.Context) KafkaUserStatusPtrOutput
}

type kafkaUserStatusPtrType KafkaUserStatusArgs

func KafkaUserStatusPtr(v *KafkaUserStatusArgs) KafkaUserStatusPtrInput {
	return (*kafkaUserStatusPtrType)(v)
}

func (*kafkaUserStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserStatus)(nil)).Elem()
}

func (i *kafkaUserStatusPtrType) ToKafkaUserStatusPtrOutput() KafkaUserStatusPtrOutput {
	return i.ToKafkaUserStatusPtrOutputWithContext(context.Background())
}

func (i *kafkaUserStatusPtrType) ToKafkaUserStatusPtrOutputWithContext(ctx context.Context) KafkaUserStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusPtrOutput)
}

// The status of the Kafka User.
type KafkaUserStatusOutput struct{ *pulumi.OutputState }

func (KafkaUserStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserStatus)(nil)).Elem()
}

func (o KafkaUserStatusOutput) ToKafkaUserStatusOutput() KafkaUserStatusOutput {
	return o
}

func (o KafkaUserStatusOutput) ToKafkaUserStatusOutputWithContext(ctx context.Context) KafkaUserStatusOutput {
	return o
}

func (o KafkaUserStatusOutput) ToKafkaUserStatusPtrOutput() KafkaUserStatusPtrOutput {
	return o.ToKafkaUserStatusPtrOutputWithContext(context.Background())
}

func (o KafkaUserStatusOutput) ToKafkaUserStatusPtrOutputWithContext(ctx context.Context) KafkaUserStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserStatus) *KafkaUserStatus {
		return &v
	}).(KafkaUserStatusPtrOutput)
}

// List of status conditions.
func (o KafkaUserStatusOutput) Conditions() KafkaUserStatusConditionsArrayOutput {
	return o.ApplyT(func(v KafkaUserStatus) []KafkaUserStatusConditions { return v.Conditions }).(KafkaUserStatusConditionsArrayOutput)
}

// The generation of the CRD that was last reconciled by the operator.
func (o KafkaUserStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaUserStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// The name of `Secret` where the credentials are stored.
func (o KafkaUserStatusOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatus) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// Username.
func (o KafkaUserStatusOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatus) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type KafkaUserStatusPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserStatus)(nil)).Elem()
}

func (o KafkaUserStatusPtrOutput) ToKafkaUserStatusPtrOutput() KafkaUserStatusPtrOutput {
	return o
}

func (o KafkaUserStatusPtrOutput) ToKafkaUserStatusPtrOutputWithContext(ctx context.Context) KafkaUserStatusPtrOutput {
	return o
}

func (o KafkaUserStatusPtrOutput) Elem() KafkaUserStatusOutput {
	return o.ApplyT(func(v *KafkaUserStatus) KafkaUserStatus {
		if v != nil {
			return *v
		}
		var ret KafkaUserStatus
		return ret
	}).(KafkaUserStatusOutput)
}

// List of status conditions.
func (o KafkaUserStatusPtrOutput) Conditions() KafkaUserStatusConditionsArrayOutput {
	return o.ApplyT(func(v *KafkaUserStatus) []KafkaUserStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(KafkaUserStatusConditionsArrayOutput)
}

// The generation of the CRD that was last reconciled by the operator.
func (o KafkaUserStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaUserStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// The name of `Secret` where the credentials are stored.
func (o KafkaUserStatusPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserStatus) *string {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(pulumi.StringPtrOutput)
}

// Username.
func (o KafkaUserStatusPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserStatus) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type KafkaUserStatusConditions struct {
	// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about the condition's last transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition (a single word in CamelCase).
	Reason *string `pulumi:"reason"`
	// The status of the condition, either True, False or Unknown.
	Status *string `pulumi:"status"`
	// The unique identifier of a condition, used to distinguish between other conditions in the resource.
	Type *string `pulumi:"type"`
}

// KafkaUserStatusConditionsInput is an input type that accepts KafkaUserStatusConditionsArgs and KafkaUserStatusConditionsOutput values.
// You can construct a concrete instance of `KafkaUserStatusConditionsInput` via:
//
//	KafkaUserStatusConditionsArgs{...}
type KafkaUserStatusConditionsInput interface {
	pulumi.Input

	ToKafkaUserStatusConditionsOutput() KafkaUserStatusConditionsOutput
	ToKafkaUserStatusConditionsOutputWithContext(context.Context) KafkaUserStatusConditionsOutput
}

type KafkaUserStatusConditionsArgs struct {
	// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about the condition's last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition (a single word in CamelCase).
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// The status of the condition, either True, False or Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The unique identifier of a condition, used to distinguish between other conditions in the resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KafkaUserStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserStatusConditions)(nil)).Elem()
}

func (i KafkaUserStatusConditionsArgs) ToKafkaUserStatusConditionsOutput() KafkaUserStatusConditionsOutput {
	return i.ToKafkaUserStatusConditionsOutputWithContext(context.Background())
}

func (i KafkaUserStatusConditionsArgs) ToKafkaUserStatusConditionsOutputWithContext(ctx context.Context) KafkaUserStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusConditionsOutput)
}

// KafkaUserStatusConditionsArrayInput is an input type that accepts KafkaUserStatusConditionsArray and KafkaUserStatusConditionsArrayOutput values.
// You can construct a concrete instance of `KafkaUserStatusConditionsArrayInput` via:
//
//	KafkaUserStatusConditionsArray{ KafkaUserStatusConditionsArgs{...} }
type KafkaUserStatusConditionsArrayInput interface {
	pulumi.Input

	ToKafkaUserStatusConditionsArrayOutput() KafkaUserStatusConditionsArrayOutput
	ToKafkaUserStatusConditionsArrayOutputWithContext(context.Context) KafkaUserStatusConditionsArrayOutput
}

type KafkaUserStatusConditionsArray []KafkaUserStatusConditionsInput

func (KafkaUserStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaUserStatusConditions)(nil)).Elem()
}

func (i KafkaUserStatusConditionsArray) ToKafkaUserStatusConditionsArrayOutput() KafkaUserStatusConditionsArrayOutput {
	return i.ToKafkaUserStatusConditionsArrayOutputWithContext(context.Background())
}

func (i KafkaUserStatusConditionsArray) ToKafkaUserStatusConditionsArrayOutputWithContext(ctx context.Context) KafkaUserStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusConditionsArrayOutput)
}

type KafkaUserStatusConditionsOutput struct{ *pulumi.OutputState }

func (KafkaUserStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserStatusConditions)(nil)).Elem()
}

func (o KafkaUserStatusConditionsOutput) ToKafkaUserStatusConditionsOutput() KafkaUserStatusConditionsOutput {
	return o
}

func (o KafkaUserStatusConditionsOutput) ToKafkaUserStatusConditionsOutputWithContext(ctx context.Context) KafkaUserStatusConditionsOutput {
	return o
}

// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
func (o KafkaUserStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Human-readable message indicating details about the condition's last transition.
func (o KafkaUserStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition (a single word in CamelCase).
func (o KafkaUserStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// The status of the condition, either True, False or Unknown.
func (o KafkaUserStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The unique identifier of a condition, used to distinguish between other conditions in the resource.
func (o KafkaUserStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KafkaUserStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (KafkaUserStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaUserStatusConditions)(nil)).Elem()
}

func (o KafkaUserStatusConditionsArrayOutput) ToKafkaUserStatusConditionsArrayOutput() KafkaUserStatusConditionsArrayOutput {
	return o
}

func (o KafkaUserStatusConditionsArrayOutput) ToKafkaUserStatusConditionsArrayOutputWithContext(ctx context.Context) KafkaUserStatusConditionsArrayOutput {
	return o
}

func (o KafkaUserStatusConditionsArrayOutput) Index(i pulumi.IntInput) KafkaUserStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaUserStatusConditions {
		return vs[0].([]KafkaUserStatusConditions)[vs[1].(int)]
	}).(KafkaUserStatusConditionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserStatusInput)(nil)).Elem(), KafkaUserStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserStatusPtrInput)(nil)).Elem(), KafkaUserStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserStatusConditionsInput)(nil)).Elem(), KafkaUserStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserStatusConditionsArrayInput)(nil)).Elem(), KafkaUserStatusConditionsArray{})
	pulumi.RegisterOutputType(KafkaUserStatusOutput{})
	pulumi.RegisterOutputType(KafkaUserStatusPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserStatusConditionsOutput{})
	pulumi.RegisterOutputType(KafkaUserStatusConditionsArrayOutput{})
}
